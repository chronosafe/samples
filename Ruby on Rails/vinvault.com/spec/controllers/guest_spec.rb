require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe DecodesController do
  include Devise::TestHelpers

  before(:all) do
    load "#{Rails.root}/db/seeds.rb"
  end

  before(:each) do
    Pattern.create(value: '1D7RB1CT A')
    Pattern.create(value: '1D7RB1CT B')
    Decode.delete_all
    @user = FactoryGirl.create(:guest)
    sign_in @user
  end

  # This should return the minimal set of attributes required to create a valid
  # Decode. As you add validations to Decode, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes)   { { vin: '1D7RB1CT8AS203937' } }
  let(:invalid_attributes) { { invalid: nil } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # DecodesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all decodes as @decodes" do
      post :create, valid_attributes, valid_session
      get :index, {}, valid_session
      assigns(:decodes).should eq([])
    end
  end

  describe "GET show" do
    it "assigns the requested decode as @decode" do
      decode = Decode.create! valid_attributes
      get :show, {:id => decode.to_param}, valid_session
      assigns(:decode).should eq(decode)
    end
  end

  describe "GET new" do
    it "assigns a new decode as @decode" do
      get :new, {}, valid_session
      assigns(:decode).should be_a_new(Decode)
    end
  end

  describe "GET edit" do
    it "assigns the requested decode as @decode" do
      decode = Decode.create! valid_attributes
      get :edit, {:id => decode.to_param}, valid_session
      assigns(:decode).should eq(decode)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Decode" do
        expect {
          post :create, {:decode => valid_attributes}, valid_session
        }.to change(Decode, :count).by(0)
      end

      it "assigns a newly created decode as @decode" do
        post :create, {:decode => valid_attributes}, valid_session
        assigns(:decode).should be_a(Decode)
        assigns(:decode).should_not be_persisted
      end

      it "assigns the pattern to the decode" do
        # Add values to the Pattern table to test
        Pattern.create(value: '1D7RB1CT A')
        Pattern.create(value: '1D7RB1CT B')
        post :create, {:decode => valid_attributes}, valid_session
        assigns(:decode).vin.should eq('1D7RB1CT8AS203937')
        assigns(:decode).successful.should eq(false)
        assigns(:decode).pattern.should eq(nil)
      end

      it "redirects to the created decode" do
        post :create, {:decode => valid_attributes}, valid_session
        response.should redirect_to(root_url)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved decode as @decode" do
        # Trigger the behavior that occurs when invalid params are submitted
        Decode.any_instance.stub(:save).and_return(false)
        post :create, {:decode => invalid_attributes}, valid_session
        assigns(:decode).should be_a_new(Decode)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Decode.any_instance.stub(:save).and_return(false)
        post :create, {:decode => invalid_attributes}, valid_session
        response.should_not render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested decode" do
        decode = Decode.create! valid_attributes
        # Assuming there are no other decodes in the database, this
        # specifies that the Decode created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        # Decode.any_instance.should_receive(:update).with({ :vin => "1D7RB1CT8AS203937" })
        put :update, {:id => decode.to_param, :decode => { :vin => "1D7RB1CT8AS203937" }}, valid_session
      end

      it "assigns the requested decode as @decode" do
        decode = Decode.create! valid_attributes
        put :update, {:id => decode.to_param, :decode => valid_attributes}, valid_session
        assigns(:decode).should eq(decode)
      end

      it "redirects to the decode" do
        decode = Decode.create! valid_attributes
        put :update, {:id => decode.to_param, :decode => valid_attributes}, valid_session
        response.should redirect_to(root_url)
      end
    end

    describe "with invalid params" do
      it "assigns the decode as @decode" do
        decode = Decode.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Decode.any_instance.stub(:save).and_return(false)
        put :update, {:id => decode.to_param, :decode => invalid_attributes}, valid_session
        assigns(:decode).should eq(decode)
      end

      it "re-renders the 'edit' template" do
        decode = Decode.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Decode.any_instance.stub(:save).and_return(false)
        put :update, {:id => decode.to_param, :decode => invalid_attributes}, valid_session
        response.should_not render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested decode" do
      decode = Decode.create! valid_attributes
      expect {
        delete :destroy, {:id => decode.to_param}, valid_session
      }.to change(Decode, :count).by(0)
    end

    it "redirects to the decodes list" do
      decode = Decode.create! valid_attributes
      delete :destroy, {:id => decode.to_param}, valid_session
      response.should redirect_to(root_url)
    end
  end

end


